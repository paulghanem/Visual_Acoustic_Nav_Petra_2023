// Autogenerated, do not edit

package com.occipital.@CREATE_APP_NAME@;

import java.util.Map;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;

public class StructureCoreUSBHelper {
    public interface Delegate {
        void newStructureCoreDevice(UsbDeviceConnection conn);
    }

    private class USBMessageReceiver extends BroadcastReceiver {
        private StructureCoreUSBHelper owner;
        public PendingIntent permissionIntent;
        private static final String ACTION_USB_PERMISSION = "com.occipital.@CREATE_APP_NAME@.StructureCoreUSBHelper.USB_PERMISSION";

        public USBMessageReceiver(StructureCoreUSBHelper owner) {
            this.owner = owner;
            permissionIntent = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_USB_PERMISSION), 0);

            IntentFilter filter = new IntentFilter();
            filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
            filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
            filter.addAction(ACTION_USB_PERMISSION);
            this.owner.context.registerReceiver(this, filter);
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            owner.evaluateDevices();
        }
    }

    private enum State {
        NO_DEVICE,
        NEED_PERMISSION,
        READY,
    }

    private Context context;
    private Delegate delegate;
    private UsbManager usbManager;
    private State state = State.NO_DEVICE;
    private UsbDevice activeDevice;
    private USBMessageReceiver messageReceiver;

    public StructureCoreUSBHelper(Context context, Delegate delegate) {
        this.context = context;
        this.delegate = delegate;
        usbManager = (UsbManager)context.getSystemService(Context.USB_SERVICE);
        messageReceiver = new USBMessageReceiver(this);
        evaluateDevices();
    }

    private static boolean deviceIsStructureCore(UsbDevice device) {
        return device.getVendorId() == 0x277A && device.getProductId() == 0x0002;
    }

    private void evaluateDevices() {
        while (true) {
            Map<String, UsbDevice> devices = usbManager.getDeviceList();
            if (state == State.NO_DEVICE) {
                activeDevice = null;
                for (UsbDevice device : devices.values()) {
                    if (deviceIsStructureCore(device)) {
                        activeDevice = device;
                        break;
                    }
                }
                if (activeDevice != null) {
                    if (usbManager.hasPermission(activeDevice)) {
                        UsbDeviceConnection conn = usbManager.openDevice(activeDevice);
                        if (conn == null) {
                            // Failed, try another device
                            state = State.NO_DEVICE;
                            continue;
                        }
                        else {
                            delegate.newStructureCoreDevice(conn);
                            state = State.READY;
                            continue;
                        }
                    }
                    else {
                        state = State.NEED_PERMISSION;
                        usbManager.requestPermission(activeDevice, messageReceiver.permissionIntent);
                        continue;
                    }
                }
            }
            else if (state == State.NEED_PERMISSION) {
                if (!devices.containsValue(activeDevice)) {
                    state = State.NO_DEVICE;
                    continue;
                }
                else if (usbManager.hasPermission(activeDevice)) {
                    UsbDeviceConnection conn = usbManager.openDevice(activeDevice);
                    if (conn == null) {
                        // Failed, try another device
                        state = State.NO_DEVICE;
                        continue;
                    }
                    else {
                        delegate.newStructureCoreDevice(conn);
                        state = State.READY;
                        continue;
                    }
                }
            }
            else if (state == State.READY) {
                if (!devices.containsValue(activeDevice)) {
                    state = State.NO_DEVICE;
                    continue;
                }
            }
            break;
        }
    }
}
