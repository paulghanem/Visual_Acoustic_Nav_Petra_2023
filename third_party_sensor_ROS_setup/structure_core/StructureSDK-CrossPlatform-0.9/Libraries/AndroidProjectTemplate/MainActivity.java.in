// Autogenerated, do not edit

package com.occipital.@CREATE_APP_NAME@;

import android.app.Activity;
import android.content.Context;
import android.content.res.Configuration;
import android.hardware.usb.UsbDeviceConnection;
import android.Manifest;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.opengl.GLSurfaceView;
import android.support.v4.app.ActivityCompat;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.egl.EGLConfig;

public class MainActivity extends Activity implements StructureCoreUSBHelper.Delegate, ActivityCompat.OnRequestPermissionsResultCallback {
    private class GLRenderer implements GLSurfaceView.Renderer {
        private MainActivity owner;
        private int width;
        private int height;

        public GLRenderer(MainActivity owner) {
            this.owner = owner;
        }

        public void onSurfaceCreated(GL10 gl, EGLConfig config) {}

        public void onSurfaceChanged(GL10 gl, int width, int height) {
            this.width = width;
            this.height = height;
        }

        public void onDrawFrame(GL10 gl) {
            owner.renderFrame(width, height, owner.scaleFactor);
        }
    }

    private class GLView extends GLSurfaceView {
        private MainActivity owner;
        private boolean mouseDown;

        public GLView(Context context, MainActivity owner) {
            super(context);
            this.owner = owner;
        }

        public boolean onTouchEvent(MotionEvent event) {
            float x = event.getX();
            float y = event.getY();
            switch (event.getActionMasked()) {
                case MotionEvent.ACTION_DOWN:
                    mouseDown = true;
                    owner.updateMouseState(mouseDown, (int)x, (int)y);
                    return true;

                case MotionEvent.ACTION_UP:
                case MotionEvent.ACTION_CANCEL:
                    mouseDown = false;
                    owner.updateMouseState(mouseDown, (int)x, (int)y);
                    return true;

                case MotionEvent.ACTION_MOVE:
                    owner.updateMouseState(mouseDown, (int)x, (int)y);
                    return true;

                default:
                    return false;
            }
        }
    }

    private GLView glView;
    private volatile float scaleFactor = 1.f;
    private StructureCoreUSBHelper usbHelper;

    private float computeScaleFactor() {
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        return metrics.density * (float)0.75;
    }

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setupApp();

        scaleFactor = computeScaleFactor();
        glView = new GLView(this, this);
        glView.setEGLContextClientVersion(3);
        glView.setPreserveEGLContextOnPause(true);
        glView.setRenderer(new GLRenderer(this));
        glView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
        setContentView(glView);

        usbHelper = new StructureCoreUSBHelper(this, this);
    }

    protected void onDestroy() {
        super.onDestroy();
        teardownApp();
    }

    public void onConfigurationChanged(Configuration config) {
        super.onConfigurationChanged(config);
        scaleFactor = computeScaleFactor();
        glView.requestRender();
    }

    protected void onPause() {
        super.onPause();
        glView.onPause();
    }

    protected void onResume() {
        super.onResume();
        glView.onResume();
        ActivityCompat.requestPermissions(this, new String[] {
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
        }, 1);
    }

    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
    }

    public void newStructureCoreDevice(UsbDeviceConnection conn) {
        plugStructureCoreFileDescriptor(conn.getFileDescriptor());
    }

    private native void setupApp();
    private native void teardownApp();
    private native void renderFrame(int currentWidth, int currentHeight, float scaleFactor);
    private native void updateMouseState(boolean down, int x, int y);
    private native void plugStructureCoreFileDescriptor(int fd);

    static {
        System.loadLibrary("MainActivity");
    }
}
